#include "grid.h"
#include <iostream>

//Helper functions: you may use them as a template.

// Check if no more tokens can be placed
bool isGridFull() {
    for (int row = 0; row < 2; ++row) {
        for (int col = 0; col < 2; ++col) {
            if (grid.fields(row, col) == ' ') {
                return false;
            }
        }
    }
    return true;
}

//Place a vertical or horizontal line, depending on direction
//can be used after having verified that the move is valid
void drawLine(int row, int col, char direction) {
  if (direction == 'l') {
    grid.horizontal(row, col - 1) = true;
  } else if (direction == 'r') {
    grid.horizontal(row, col) = true ;
  } else if (direction == 'u') {
    grid.vertical(row - 1, col) = true;
  } else if (direction == 'd') {
    grid.vertical(row, col) = true;
  }
}

//function which checks if a line has already been drawn
bool lineDrawn(int row, int col, char direction) {
  if (direction == 'l' && grid.horizontal(row, col - 1)) {
    return true;
  } else if (direction == 'r' && grid.horizontal(row, col)) {
    return true;
  } else if (direction == 'u' && grid.vertical(row - 1, col)) {
    return true;
  } else if (direction == 'd' && grid.vertical(row, col)) {
    return true;
  }
  return false;
}



//verify if a move is valid
// try to implement switch case -> more readability (if time)
bool isValidMove(int row, int col, char direction) {
  if (direction == 'l') {
    return (( col > 0 && col <= 2) && (row >= 0 && row <= 2));
  } else if (direction == 'r') {
    return (( col >= 0 && col < 2) && (row >= 0 && row <= 2));
  } else if (direction == 'u') {
    return (( col >= 0 && col <= 2) && (row > 0 && row <= 2));
  } else if (direction == 'd') {
    return (( col >= 0 && col <= 2) && (row >= 0 && row < 2))
  }
 return false;
}

//Does adding a line result in drawing an unclaimed box?
//verify that the input is right! (not (0, 2) for example)
bool shouldPlaceToken(int row, int col) {
  return ((grid.horizontal(row, col) && grid.vertical(row, col))
  && (grid.horizontal(row + 1, col) && grid.vertical(row, col + 1)));
}

//swaps the bools of A and B
void boolSwap(bool& A, bool& B) {
  if (A == true) {
    A = false;
    B = true;
  }
  else {
    A = true;
    B = false;
  }
}

//Function which determines if a move could induce 2 fields that are being taken
//valid move as input
bool 2FieldsPossible(int row, int col, char direction) {
  if (diretion == "l" || direction == "r") {
    return (row == 1 && col == 0 || row == 1 && col == 1);
  }
  else { //direction == "u" or "d"
    return (row == 0 && col == 1 || row == 1 && col == 1);
  }
}


//determines if field is filled by A or B
void AorBGrid(bool A, bool B) {
  if (A) {
    grid.fields(row, col) = 'A';
    grid.fields(row - 1, col) = 'A';
  }
  else {
    grid.fields(row, col) = 'B';
    grid.fields(row - 1, col) = 'B';
  }
}

//checks if a box has been closed
bool boxCheck(){
  
}


int main() {

  // TODO: Replace the following implementation by the actual Dots And Boxes program
  
  //funtion test:
  /*std::cout << isValidMove(0, 2, 'l') << std::endl;
  drawLine(0, 2, 'l');
  grid.printGrid();*/
  
  bool A = true; // A begins to play
  bool B = false; 
  
  //test of boolSwap()
  /*boolSwap(A, B);
  std::cout << A << std::endl;
  std::cout << B << std::endl;*/
  
  int row, col, direction;
  
  //gameloop
  while (!isGridFull()) {
    std::cout << "Input your next move in following order: row col direction" << std::endl;
    std::cin >> row << std::endl;
    std::cin >> col << std::endl;
    std::cin >> direction << std::endl;
    
    if (isValidMove(row, col, direction)) {
      if (!lineDrawn(row, col, direction)) {
        drawLine(row, col, direction);
        
      }
    }
    else {
      std::cout << "Invalid move!"
    }
    
  }
  
  
  // Feature-Demo: Draw a box with an 'X' in the upper left corner of the board.
  grid.vertical(0, 0) = true;
  grid.vertical(0, 1) = true;
  grid.horizontal(0, 0) = true;
  grid.horizontal(1, 0) = true;
  grid.fields(0, 0) = 'X';
  
  // Feature-Demo: Print the grid.
  grid.printGrid();  

  return 0;
}
